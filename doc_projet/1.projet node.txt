Voici un guide détaillé de votre projet Node.js basé sur les fichiers fournis :

Structure du projet
Votre projet est structuré comme suit :

lua
Copier le code
.
├── config.js
├── data
│   └── articles.json
├── logger.js
├── logs
│   ├── log.json
│   └── users.json
├── models
│   └── User.js
├── package-lock.json
├── package.json
├── public
│   ├── script.js
│   └── style.css
├── routes
│   └── users.js
├── server.js
├── users.json
└── views
    ├── article.ejs
    ├── articles.ejs
    ├── create.ejs
    ├── index.ejs
    ├── login.ejs
    ├── partials
    │   ├── footer.ejs
    │   └── header.ejs
    └── register.ejs
Configuration
config.js : Ce fichier contient les configurations de votre application, y compris la connexion à la base de données MongoDB avec l'URI mongodb://localhost:27017/BDD1_projet_node​​.
Serveur et Middleware
server.js : C'est le fichier principal de votre serveur. Il utilise Express pour créer le serveur et configure les middlewares pour gérer les sessions, les messages flash, le parsing des données des formulaires, et la gestion des fichiers statiques​​. Il établit également la connexion à MongoDB et définit plusieurs routes pour les opérations CRUD sur les utilisateurs et les articles.
Routes
users.js : Ce fichier gère les routes pour l'inscription, la connexion, et l'authentification des utilisateurs. Il utilise bcrypt pour le hachage des mots de passe et jsonwebtoken pour la gestion des tokens JWT​​.
Modèles de données
User.js : Modèle Mongoose pour les utilisateurs, avec des champs pour le nom d'utilisateur, l'email, et le mot de passe.
articleSchema : Définition du schéma pour les articles, incluant des champs tels que nom, codeArticle, description, image, prix, et quantite​​.
Vues
Les vues utilisent EJS pour le rendu dynamique des pages. Les fichiers principaux incluent :

index.ejs : Page d'accueil du site​​.
login.ejs : Page de connexion des utilisateurs​​.
register.ejs : Page d'inscription des utilisateurs​​.
create.ejs : Page pour créer un nouvel article​​.
articles.ejs : Affiche la liste des articles disponibles​​.
article.ejs : Détail d'un article spécifique​​.
partials/header.ejs et partials/footer.ejs : Contiennent le header et le footer communs à toutes les pages​​​​.
Fichiers Statics
style.css : Fichier de style principal pour le projet, définissant les styles pour les différentes pages et composants​​.
script.js : Fichier JavaScript gérant des fonctionnalités front-end comme l'état de connexion de l'utilisateur​​.
Journalisation
logger.js : Utilise winston pour la gestion des logs. Les logs sont enregistrés dans le dossier logs sous forme de fichiers JSON​​.
Fonctionnalités principales
Inscription et Connexion des Utilisateurs : Gestion sécurisée des utilisateurs avec hachage des mots de passe et tokens JWT.
CRUD sur les Articles : Créer, lire, mettre à jour et supprimer des articles.
Gestion des Sessions : Utilisation de express-session pour gérer les sessions utilisateur.
Messages Flash : Pour afficher des messages d'information ou d'erreur temporaires.
Protection des Routes : Middleware ensureAuthenticated pour protéger les routes nécessitant une authentification.
Ce guide vous donne une vue d'ensemble du fonctionnement de votre projet Node.js, des fichiers et des fonctionnalités clés. Pour toute autre question ou besoin d'assistance, n'hésitez pas à demander !

____________________________________________________________

Utilisation des API dans le Projet
Dans votre projet Node.js, vous utilisez plusieurs API internes pour gérer différentes fonctionnalités, principalement autour de la gestion des utilisateurs et des articles. Voici une explication détaillée de ces API et de leur utilité.

Qu'est-ce qu'une API ?
Une API (Application Programming Interface) est un ensemble de définitions et de protocoles qui permettent à une application logicielle de communiquer avec une autre. Dans le contexte des applications web, les API sont souvent utilisées pour échanger des données entre le serveur et le client (navigateur ou autre application cliente). Les API REST (Representational State Transfer) sont couramment utilisées pour créer des interfaces HTTP qui permettent aux clients d'effectuer des opérations CRUD (Create, Read, Update, Delete) sur les ressources.

API utilisées dans le projet
API pour l'inscription des utilisateurs (/api/register)

Description : Cette API permet à un utilisateur de s'inscrire sur le site. Elle reçoit les informations d'inscription (nom d'utilisateur, email, mot de passe), hache le mot de passe pour des raisons de sécurité, et enregistre l'utilisateur dans la base de données.
Utilité : Fournir un moyen sécurisé pour les nouveaux utilisateurs de créer un compte​​​​.
API pour la connexion des utilisateurs (/api/login)

Description : Cette API vérifie les informations de connexion fournies par un utilisateur. Elle compare le mot de passe haché stocké dans la base de données avec le mot de passe fourni par l'utilisateur et, en cas de succès, crée une session utilisateur.
Utilité : Authentifier les utilisateurs et gérer les sessions pour permettre l'accès aux ressources protégées​​​​.
API pour créer un article (/create)

Description : Cette API permet à un utilisateur authentifié de créer un nouvel article en fournissant des détails tels que le nom, le code de l'article, la description, l'image, le prix et la quantité.
Utilité : Permettre aux utilisateurs de contribuer des contenus (articles) sur le site​​.
API pour récupérer tous les articles (/api/articles)

Description : Cette API renvoie une liste de tous les articles disponibles dans la base de données. Elle est généralement utilisée pour afficher tous les articles sur une page de liste.
Utilité : Fournir un moyen de visualiser l'ensemble des articles disponibles sur le site​​.
API pour récupérer les détails d'un article spécifique (/api/article/:codeArticle)

Description : Cette API renvoie les détails d'un article particulier en fonction de son code unique. Elle est utilisée pour afficher les détails d'un article lorsqu'un utilisateur clique dessus.
Utilité : Permettre aux utilisateurs de consulter les détails spécifiques d'un article, tels que la description, le prix, et la disponibilité​​.
API pour déconnecter un utilisateur (/logout)

Description : Cette route permet de déconnecter un utilisateur en détruisant la session actuelle.
Utilité : Fournir une méthode pour que les utilisateurs puissent se déconnecter en toute sécurité, mettant ainsi fin à leur session active​​.
Pourquoi utiliser ces API ?
Les API dans votre projet servent plusieurs objectifs clés :

Modularité : Elles permettent de séparer les différentes fonctionnalités de l'application en modules distincts, ce qui facilite la maintenance et l'évolution du code.
Sécurité : Les API permettent de sécuriser l'accès aux données en mettant en place des mécanismes d'authentification et d'autorisation.
Facilité d'intégration : Elles facilitent l'intégration de nouvelles fonctionnalités ou l'interfaçage avec d'autres services ou applications externes.
Gestion centralisée des données : Les API centralisent les interactions avec la base de données, assurant ainsi une cohérence des données et une gestion simplifiée des erreurs.
Les API sont donc essentielles pour structurer et organiser votre application web, en assurant une communication efficace entre le serveur et le client tout en maintenant des standards de sécurité élevés. Si vous avez des questions supplémentaires ou besoin d'une clarification, n'hésitez pas à demander !