.
├── app.js
├── article.html
├── articles.html
├── create.html
├── data
│   └── articles.json
├── logger.js
├── login.html
├── logs
│   ├── log.json
│   ├── mongo.j
│   └── users.json
├── package-lock.json
├── package.json
├── projet node.txt
├── public
│   ├── script.js
│   └── style.css
├── register.html
├── serveur.js
└── users.json

________________________________________________________________


// app.js

// Importer le logger
const logger = require('./logger');

console.log("Hello World");

let hello = "Hello World 2";

console.log(hello);

// Importer le module readline
const readline = require('readline');

// Créer une interface readline
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Poser une question à l'utilisateur
rl.question('Comment vous appelez-vous ? ', (answer) => {
  // Logguer la réponse de l'utilisateur
  logger.info({ message: `L'utilisateur s'appelle : ${answer}` });

  // Fonction pour demander l'âge avec validation
  const askAge = () => {
    rl.question('Quel âge avez-vous ? ', (age) => {
      // Vérifier que l'âge est un nombre entier positif
      if (isNaN(age) || age <= 0) {
        console.log('Veuillez entrer un âge valide.');
        askAge(); // Redemander l'âge si l'entrée n'est pas valide
      } else {
        // Logguer l'âge de l'utilisateur
        logger.info({ message: `L'utilisateur a ${age} ans` });

        // Afficher les réponses de l'utilisateur
        console.log(`Bonjour, ${answer} ! Vous avez ${age} ans`);

        // Fermer l'interface readline
        rl.close();
      }
    });
  };

  // Demander l'âge pour la première fois
  askAge();
});

________________________________________________________________________________________________________________________________

//article.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Article</title>
    <link rel="stylesheet" href="public/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <nav>
        <div class="logo">node project</div>        
        <ul>
            <li><a href="/index.html">Accueil</a></li>
            <li><a href="/create">Créer un article</a></li>
            <li><a href="/articles">Articles</a></li>
            <li><a href="/register" id="register-link"><i class="fas fa-user-plus"></i></a></li>
            <li><a href="/login" id="login-link"><i class="fas fa-sign-in-alt"></i></a></li>
        </ul>
    </nav>
    
    <div id="article-detail"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const pathArray = window.location.pathname.split('/');
            const codeArticle = pathArray[pathArray.length - 1];
            fetch(`/api/article/${codeArticle}`)
                .then(response => response.json())
                .then(article => {
                    const articleDetail = document.getElementById('article-detail');
                    articleDetail.innerHTML = `
                        <h1>${article.nom}</h1>
                        <p>Code Article: ${article.codeArticle}</p>
                        <p>Description: ${article.description}</p>
                        <img src="${article.image}" alt="${article.nom}">
                        <p>Prix: ${article.prix} €</p>
                        <p>Quantité: ${article.quantite}</p>
                    `;
                });
        });
    </script>
</body>
</html>

________________________________________________________________________________________________________________________________

//articles.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Liste des articles</title>
    <link rel="stylesheet" href="public/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <nav>
        <div class="logo">node project</div>        
        <ul>
            <li><a href="/index.html">Accueil</a></li>
            <li><a href="/create">Créer un article</a></li>
            <li><a href="/articles">Articles</a></li>
            <li><a href="/register" id="register-link"><i class="fas fa-user-plus"></i></a></li>
            <li><a href="/login" id="login-link"><i class="fas fa-sign-in-alt"></i></a></li>
        </ul>
    </nav>
    
    <h1>Liste des articles</h1>
    <div id="articles-list"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            fetch('/api/articles')
                .then(response => response.json())
                .then(articles => {
                    const articlesList = document.getElementById('articles-list');
                    articles.forEach(article => {
                        const articleDiv = document.createElement('div');
                        articleDiv.innerHTML = `
                            <h2>${article.nom}</h2>
                            <p>Code Article: ${article.codeArticle}</p>
                            <p>Description: ${article.description}</p>
                            <p>Prix: ${article.prix} €</p>
                            <p>Quantité: ${article.quantite}</p>
                            <a href="/article/${article.codeArticle}">Voir plus</a>
                        `;
                        articlesList.appendChild(articleDiv);
                    });
                });
        });
    </script>
</body>
</html>

________________________________________________________________________________________________________________________________

//create.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Créer un article</title>
    <link rel="stylesheet" href="public/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>

    <nav>
        <div class="logo">node project</div>        
        <ul>
            <li><a href="/index.html">Accueil</a></li>
            <li><a href="/create">Créer un article</a></li>
            <li><a href="/articles">Articles</a></li>
            <li><a href="/register" id="register-link"><i class="fas fa-user-plus"></i></a></li>
            <li><a href="/login" id="login-link"><i class="fas fa-sign-in-alt"></i></a></li>
        </ul>
    </nav>
    
    <h1>Créer un nouvel article</h1>
    <form action="/create" method="POST">
        <label for="nom">Nom:</label>
        <input type="text" id="nom" name="nom" required><br><br>
        
        <label for="codeArticle">Code Article:</label>
        <input type="text" id="codeArticle" name="codeArticle" required><br><br>
        
        <label for="description">Description:</label>
        <textarea id="description" name="description" required></textarea><br><br>
        
        <label for="image">URL de l'image:</label>
        <input type="text" id="image" name="image" required><br><br>
        
        <label for="prix">Prix:</label>
        <input type="number" step="0.01" id="prix" name="prix" required><br><br>
        
        <label for="quantite">Quantité:</label>
        <input type="number" id="quantite" name="quantite" required><br><br>
        
        <button type="submit">Créer</button>
    </form>
    <script src="public/script.js"></script> <!-- Inclure le script JavaScript -->

</body>
</html>

________________________________________________________________________________________________________________________________

//articles.jison

[
  {
    "nom": "bic",
    "codeArticle": "12345",
    "description": "stylo bille",
    "image": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/03-BICcristal2008-03-26.jpg/280px-03-BICcristal2008-03-26.jpg",
    "prix": 2.49,
    "quantite": 1
  },
  {
    "nom": "bic 4 couleurs",
    "codeArticle": "1369",
    "description": "stylo 4 couleurs",
    "image": "https://www.az-fournitures.com/media/catalog/product/cache/1a9d65105e7994ae2f201fa2b32bd7f3/b/i/bic-stylo-a-bille-4-couleurs-bleu-889969-visuel.jpg",
    "prix": 2.9,
    "quantite": 1
  },
  {
    "nom": "Lepage",
    "codeArticle": "12345",
    "description": "qsdcsdcsdc ",
    "image": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/03-BICcristal2008-03-26.jpg/280px-03-BICcristal2008-03-26.jpg",
    "prix": 12,
    "quantite": 1
  }
]

________________________________________________________________________________________________________________________________

// logger.js

const { createLogger, transports, format } = require('winston');
const { combine, timestamp, json } = format;
const fs = require('fs');

// Vérifier si le dossier logs existe, sinon le créer
const logsDir = './logs';
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir);
}

// Créer un logger Winston avec un transport vers un fichier JSON
const logger = createLogger({
  level: 'info',
  format: combine(
    timestamp(),
    json()
  ),
  transports: [
    new transports.File({ filename: './logs/log.json' })
  ]
});

module.exports = logger;

________________________________________________________________________________________________________________________________

//login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="public/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <header>
        <nav>
            <div class="logo">node project</div>        
            <ul>
                <li><a href="/index.html">Accueil</a></li>
                <li><a href="/create">Créer un article</a></li>
                <li><a href="/articles">Articles</a></li>
                <li><a href="/register" id="register-link"><i class="fas fa-user-plus"></i></a></li>
                <li><a href="/login" id="login-link"><i class="fas fa-sign-in-alt"></i></a></li>
            </ul>
        </nav>
        
    </header>
    <div class="container">
        <h1>Login</h1>
        <form action="/login" method="POST">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
            <br>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
            <br>
            <button type="submit">Login</button>
        </form>
    </div>
</body>
</html>

________________________________________________________________________________________________________________________________

//log.jison

{"level":"info","message":"L'utilisateur s'appelle : nico","timestamp":"2024-07-12T12:22:48.487Z"}
{"level":"info","message":"L'utilisateur a 23 ans","timestamp":"2024-07-12T12:22:51.042Z"}
{"level":"info","message":"L'utilisateur s'appelle : sd","timestamp":"2024-07-12T12:24:09.145Z"}
{"level":"info","message":"L'utilisateur a 34 ans","timestamp":"2024-07-12T12:24:11.607Z"}
{"level":"info","message":"L'utilisateur s'appelle : bibabeloula","timestamp":"2024-07-12T12:33:35.401Z"}
{"level":"info","message":"L'utilisateur a 67 ans","timestamp":"2024-07-12T12:33:37.810Z"}
{"level":"info","message":"L'utilisateur s'appelle : bap","timestamp":"2024-07-12T13:19:48.698Z"}
{"level":"info","message":"L'utilisateur a 34 ans","timestamp":"2024-07-12T13:19:51.686Z"}
{"level":"info","message":"L'utilisateur s'appelle : dsc"}
{"level":"info","message":"L'utilisateur a 32 ans"}
{"level":"info","message":"L'utilisateur s'appelle : bob","timestamp":"2024-07-12T13:55:55.448Z"}
{"level":"info","message":"L'utilisateur a 4 ans","timestamp":"2024-07-12T13:56:07.347Z"}
{"level":"info","message":"L'utilisateur s'appelle : vzsv","timestamp":"2024-07-12T14:12:21.448Z"}
{"level":"info","message":"L'utilisateur a 3 ans","timestamp":"2024-07-12T14:12:23.355Z"}
{"level":"info","message":"L'utilisateur s'appelle : skds","timestamp":"2024-07-12T14:23:31.559Z"}
{"level":"info","message":"L'utilisateur a 22 ans","timestamp":"2024-07-12T14:23:32.715Z"}
{"level":"info","message":"L'utilisateur s'appelle : pierre","timestamp":"2024-07-15T07:13:54.334Z"}
{"level":"info","message":"L'utilisateur a 36 ans","timestamp":"2024-07-15T07:13:56.105Z"}

________________________________________________________________________________________________________________________________

//users.jison

{
  "pierrre": {
    "email": "plepage7@gmail.com",
    "password": "pass"
  },
  "pierre1": {
    "email": "plepage7@gmail.com",
    "password": "monpassword2"
  },
  "plepage7": {
    "email": "plepage7@gmail.com",
    "password": "Past"
  },
  "pierre!": {
    "email": "plepage7@gmail.com",
    "password": "azerty"
  },
  "pierre": {
    "email": "plepage7@gmail.com",
    "password": "pass"
  }
}

________________________________________________________________________________________________________________________________

//package-lock.jison

{
  "name": "project",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "project",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "date-fns": "^3.6.0",
        "fs": "^0.0.1-security",
        "mongodb": "^6.8.0",
        "winston": "^3.13.1"
      }
    },
    "node_modules/@colors/colors": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/@colors/colors/-/colors-1.6.0.tgz",
      "integrity": "sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==",
      "engines": {
        "node": ">=0.1.90"
      }
    },
    "node_modules/@dabh/diagnostics": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz",
      "integrity": "sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==",
      "dependencies": {
        "colorspace": "1.1.x",
        "enabled": "2.0.x",
        "kuler": "^2.0.0"
      }
    },
    "node_modules/@mongodb-js/saslprep": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/@mongodb-js/saslprep/-/saslprep-1.1.7.tgz",
      "integrity": "sha512-dCHW/oEX0KJ4NjDULBo3JiOaK5+6axtpBbS+ao2ZInoAL9/YRQLhXzSNAFz7hP4nzLkIqsfYAK/PDE3+XHny0Q==",
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "node_modules/@types/triple-beam": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/triple-beam/-/triple-beam-1.3.5.tgz",
      "integrity": "sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw=="
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.3.tgz",
      "integrity": "sha512-CiJJvcRtIgzadHCYXw7dqEnMNRjhGZlYK05Mj9OyktqV8uVT8fD2BFOB7S1uwBE3Kj2Z+4UyPmFw/Ixgw/LAlA=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "11.0.5",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-11.0.5.tgz",
      "integrity": "sha512-coYR071JRaHa+xoEvvYqvnIHaVqaYrLPbsufM9BF63HkwI5Lgmy2QR8Q5K/lYDYo5AK82wOvSOS0UsLTpTG7uQ==",
      "dependencies": {
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/async": {
      "version": "3.2.5",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.5.tgz",
      "integrity": "sha512-baNZyqaaLhyLVKm/DlvdW051MSgO6b8eVfIezl9E5PqWxFgzLm/wQntEW4zOytVburDEr0JlALEpdOFwvErLsg=="
    },
    "node_modules/bson": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-6.8.0.tgz",
      "integrity": "sha512-iOJg8pr7wq2tg/zSlCCHMi3hMm5JTOxLTagf3zxhcenHsFp+c6uOs6K7W5UE7A4QIJGtqh/ZovFNMP4mOPJynQ==",
      "engines": {
        "node": ">=16.20.1"
      }
    },
    "node_modules/color": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/color/-/color-3.2.1.tgz",
      "integrity": "sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==",
      "dependencies": {
        "color-convert": "^1.9.3",
        "color-string": "^1.6.0"
      }
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/colorspace": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz",
      "integrity": "sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==",
      "dependencies": {
        "color": "^3.1.3",
        "text-hex": "1.0.x"
      }
    },
    "node_modules/date-fns": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-3.6.0.tgz",
      "integrity": "sha512-fRHTG8g/Gif+kSh50gaGEdToemgfj74aRX3swtiouboip5JDLAyDE9F11nHMIcvOaXeOC6D7SpNhi7uFyB7Uww==",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/enabled": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/enabled/-/enabled-2.0.0.tgz",
      "integrity": "sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ=="
    },
    "node_modules/fecha": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw=="
    },
    "node_modules/fn.name": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fn.name/-/fn.name-1.1.0.tgz",
      "integrity": "sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw=="
    },
    "node_modules/fs": {
      "version": "0.0.1-security",
      "resolved": "https://registry.npmjs.org/fs/-/fs-0.0.1-security.tgz",
      "integrity": "sha512-3XY9e1pP0CVEUCdj5BmfIZxRBTSDycnbqhIOGec9QYtmVH2fbLpj86CFWkrNOkt/Fvty4KZG5lTglL9j/gJ87w=="
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ=="
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/kuler": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz",
      "integrity": "sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A=="
    },
    "node_modules/logform": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/logform/-/logform-2.6.1.tgz",
      "integrity": "sha512-CdaO738xRapbKIMVn2m4F6KTj4j7ooJ8POVnebSgKo3KBz5axNXRAL7ZdRjIV6NOr2Uf4vjtRkxrFETOioCqSA==",
      "dependencies": {
        "@colors/colors": "1.6.0",
        "@types/triple-beam": "^1.3.2",
        "fecha": "^4.2.0",
        "ms": "^2.1.1",
        "safe-stable-stringify": "^2.3.1",
        "triple-beam": "^1.3.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg=="
    },
    "node_modules/mongodb": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-6.8.0.tgz",
      "integrity": "sha512-HGQ9NWDle5WvwMnrvUxsFYPd3JEbqD3RgABHBQRuoCEND0qzhsd0iH5ypHsf1eJ+sXmvmyKpP+FLOKY8Il7jMw==",
      "dependencies": {
        "@mongodb-js/saslprep": "^1.1.5",
        "bson": "^6.7.0",
        "mongodb-connection-string-url": "^3.0.0"
      },
      "engines": {
        "node": ">=16.20.1"
      },
      "peerDependencies": {
        "@aws-sdk/credential-providers": "^3.188.0",
        "@mongodb-js/zstd": "^1.1.0",
        "gcp-metadata": "^5.2.0",
        "kerberos": "^2.0.1",
        "mongodb-client-encryption": ">=6.0.0 <7",
        "snappy": "^7.2.2",
        "socks": "^2.7.1"
      },
      "peerDependenciesMeta": {
        "@aws-sdk/credential-providers": {
          "optional": true
        },
        "@mongodb-js/zstd": {
          "optional": true
        },
        "gcp-metadata": {
          "optional": true
        },
        "kerberos": {
          "optional": true
        },
        "mongodb-client-encryption": {
          "optional": true
        },
        "snappy": {
          "optional": true
        },
        "socks": {
          "optional": true
        }
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-3.0.1.tgz",
      "integrity": "sha512-XqMGwRX0Lgn05TDB4PyG2h2kKO/FfWJyCzYQbIhXUxz7ETt0I/FqHjUeqj37irJ+Dl1ZtU82uYyj14u2XsZKfg==",
      "dependencies": {
        "@types/whatwg-url": "^11.0.2",
        "whatwg-url": "^13.0.0"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/one-time": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz",
      "integrity": "sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==",
      "dependencies": {
        "fn.name": "1.x.x"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safe-stable-stringify": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.4.3.tgz",
      "integrity": "sha512-e2bDA2WJT0wxseVd4lsDP4+3ONX6HpMXQa1ZhFQ7SU+GjvORCmShbCMltrtIDfkYhVHrOcPtj+KhmDBdPdZD1g==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/stack-trace": {
      "version": "0.0.10",
      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
      "integrity": "sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/text-hex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz",
      "integrity": "sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg=="
    },
    "node_modules/tr46": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-4.1.1.tgz",
      "integrity": "sha512-2lv/66T7e5yNyhAAC4NaKe5nVavzuGJQVVtRYLyQ2OI8tsJ61PMLlelehb0wi2Hx6+hT/OJUWZcw8MjlSRnxvw==",
      "dependencies": {
        "punycode": "^2.3.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/triple-beam": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/triple-beam/-/triple-beam-1.4.1.tgz",
      "integrity": "sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==",
      "engines": {
        "node": ">= 14.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/whatwg-url": {
      "version": "13.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-13.0.0.tgz",
      "integrity": "sha512-9WWbymnqj57+XEuqADHrCJ2eSXzn8WXIW/YSGaZtb2WKAInQ6CHfaUUcTyyver0p8BDg5StLQq8h1vtZuwmOig==",
      "dependencies": {
        "tr46": "^4.1.1",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/winston": {
      "version": "3.13.1",
      "resolved": "https://registry.npmjs.org/winston/-/winston-3.13.1.tgz",
      "integrity": "sha512-SvZit7VFNvXRzbqGHsv5KSmgbEYR5EiQfDAL9gxYkRqa934Hnk++zze0wANKtMHcy/gI4W/3xmSDwlhf865WGw==",
      "dependencies": {
        "@colors/colors": "^1.6.0",
        "@dabh/diagnostics": "^2.0.2",
        "async": "^3.2.3",
        "is-stream": "^2.0.0",
        "logform": "^2.6.0",
        "one-time": "^1.0.0",
        "readable-stream": "^3.4.0",
        "safe-stable-stringify": "^2.3.1",
        "stack-trace": "0.0.x",
        "triple-beam": "^1.3.0",
        "winston-transport": "^4.7.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/winston-transport": {
      "version": "4.7.1",
      "resolved": "https://registry.npmjs.org/winston-transport/-/winston-transport-4.7.1.tgz",
      "integrity": "sha512-wQCXXVgfv/wUPOfb2x0ruxzwkcZfxcktz6JIMUaPLmcNhO4bZTwA/WtDWK74xV3F2dKu8YadrFv0qhwYjVEwhA==",
      "dependencies": {
        "logform": "^2.6.1",
        "readable-stream": "^3.6.2",
        "triple-beam": "^1.3.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    }
  }
}

________________________________________________________________________________________________________________________________

//package.jison

{
  "name": "project",
  "version": "1.0.0",
  "description": "premier projet",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Pierre",
  "license": "ISC",
  "dependencies": {
    "date-fns": "^3.6.0",
    "fs": "^0.0.1-security",
    "mongodb": "^6.8.0",
    "winston": "^3.13.1"
  }
}

________________________________________________________________________________________________________________________________

//script.js

// Simuler l'état de connexion de l'utilisateur
let userLoggedIn = false; // Par défaut, l'utilisateur n'est pas connecté

// Sélectionner les éléments du DOM
const registerLink = document.getElementById('register-link');
const loginLink = document.getElementById('login-link');

// Fonction pour mettre à jour l'affichage des liens d'inscription et de connexion
function updateAuthLinks() {
    if (userLoggedIn) {
        // Si l'utilisateur est connecté, afficher "Connexion"
        registerLink.innerHTML = '<i class="fas fa-sign-in-alt"></i> Connexion';
        registerLink.href = '/login'; // Lien vers la page de connexion
    } else {
        // Sinon, afficher "Inscription"
        registerLink.innerHTML = '<i class="fas fa-user-plus"></i> Inscription';
        registerLink.href = '/register'; // Lien vers la page d'inscription
    }
}

// Appeler la fonction au chargement de la page
document.addEventListener('DOMContentLoaded', () => {
    updateAuthLinks();
});

________________________________________________________________________________________________________________________________

//style.css

/* style.css */
body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    margin: 0;
    padding: 0;
}

.container {
    max-width: 400px;
    margin: 20px auto;
    background-color: #fff;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
    text-align: center;
}

form {
    display: flex;
    flex-direction: column;
}

label {
    margin-bottom: 8px;
}

input[type="text"],
input[type="password"] {
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

button {
    padding: 10px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}
/* style.css */
input[type="text"],
input[type="password"],
input[type="email"] {
    /* Styles communs pour les champs de type texte, password et email */
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

/* Reset des styles pour les éléments du menu */
header, nav, ul, li {
    margin: 0;
    padding: 0;
    list-style: none;
}

/* Style général du menu */
header {
    background-color: #333; /* Couleur de fond du header */
    color: #fff; /* Couleur du texte */
    padding: 10px 0; /* Espacement intérieur */
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #333;
    color: #fff;
    padding: 10px 20px;
}

.logo {
    font-size: 1.2em; /* Taille de police du logo */
    font-weight: bold; /* Gras pour le texte du logo */
}

ul {
    list-style-type: none; /* Supprime les puces de liste */
    margin: 0;
    padding: 0;
    display: flex;
}

ul li {
    margin-left: 20px; /* Espacement entre les éléments du menu */
}

ul li:first-child {
    margin-left: 0; /* Pas de marge à gauche pour le premier élément */
}

ul li a {
    color: #fff; /* Couleur du texte des liens */
    text-decoration: none; /* Pas de soulignement par défaut */
    padding: 10px 15px; /* Espacement intérieur des liens */
    display: inline-block; /* Affichage en bloc pour l'élément a */
    transition: background-color 0.3s; /* Transition sur la couleur de fond */
}

ul li a:hover {
    background-color: #555; /* Couleur de fond au survol */
}

#articles-list div {
    border: 1px solid #ccc;
    padding: 10px;
    margin-top: 10px;
}

#article-detail img {
    max-width: 100%;
    height: auto;
}

________________________________________________________________________________________________________________________________

//register.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <link rel="stylesheet" href="public/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <header>
        <nav>
            <div class="logo">node project</div>        
            <ul>
                <li><a href="/index.html">Accueil</a></li>
                <li><a href="/create">Créer un article</a></li>
                <li><a href="/articles">Articles</a></li>
                <li><a href="/register" id="register-link"><i class="fas fa-user-plus"></i></a></li>
                <li><a href="/login" id="login-link"><i class="fas fa-sign-in-alt"></i></a></li>
            </ul>
        </nav>
        
    </header>
    <div class="container">
        <h1>Register</h1>
        <form action="/register" method="POST">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
            <br>
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>
            <br>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
            <br>
            <button type="submit">Register</button>
        </form>
    </div>
</body>
</html>


________________________________________________________________________________________________________________________________

//serveur.js

const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const MongoClient = require('mongodb').MongoClient;

const app = express();
const port = 3000;

// Middleware pour le parsing des données de formulaire
app.use(bodyParser.urlencoded({ extended: true }));

// Servir les fichiers statiques depuis le répertoire courant
app.use(express.static(__dirname));

// URL de connexion à MongoDB
const uri = "mongodb://localhost:27017/nom-de-votre-base-de-donnees";
let db;

// Connexion à MongoDB
MongoClient.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true }, (err, client) => {
  if (err) {
    console.error('Erreur de connexion à MongoDB :', err);
    process.exit(1);
  }
  db = client.db("nom-de-votre-base-de-donnees");
  console.log('Connecté à MongoDB !');

  // Démarrer le serveur après la connexion à la base de données
  app.listen(port, () => {
    console.log(`Serveur démarré sur http://localhost:${port}`);
  });
});

// Route pour la racine (/) redirigeant vers /login.html
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'login.html'));
});

// Route pour servir la page d'inscription
app.get('/register', (req, res) => {
  res.sendFile(path.join(__dirname, 'register.html'));
});

// Route pour servir la page de connexion
app.get('/login', (req, res) => {
  res.sendFile(path.join(__dirname, 'login.html'));
});

// Route pour servir la page de création d'article
app.get('/create', (req, res) => {
  res.sendFile(path.join(__dirname, 'create.html'));
});

// Route pour servir la page des articles
app.get('/articles', (req, res) => {
  res.sendFile(path.join(__dirname, 'articles.html'));
});

// Route pour servir la page d'un article spécifique
app.get('/article/:codeArticle', (req, res) => {
  res.sendFile(path.join(__dirname, 'article.html'));
});

// Route pour traiter le formulaire d'inscription
app.post('/register', (req, res) => {
  const { username, email, password } = req.body;
  const usersCollection = db.collection('users');

  usersCollection.insertOne({ username, email, password }, (err, result) => {
    if (err) {
      console.error('Erreur lors de l\'insertion de l\'utilisateur :', err);
      res.status(500).send('Erreur lors de l\'inscription');
      return;
    }
    console.log('Utilisateur enregistré :', username);
    res.redirect('/login'); // Rediriger vers la page de connexion après l'inscription
  });
});

// Route pour traiter le formulaire de connexion
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const usersCollection = db.collection('users');

  usersCollection.findOne({ username, password }, (err, user) => {
    if (err) {
      console.error('Erreur lors de la recherche de l\'utilisateur :', err);
      res.status(500).send('Erreur lors de la connexion');
      return;
    }

    if (user) {
      console.log('Utilisateur connecté :', username);
      res.redirect('/articles'); // Rediriger vers la page des articles après connexion
    } else {
      console.log('Échec de la connexion pour :', username);
      res.status(401).send('Nom d\'utilisateur ou mot de passe incorrect');
    }
  });
});

// Route pour traiter le formulaire de création d'article
app.post('/create', (req, res) => {
  const { nom, codeArticle, description, image, prix, quantite } = req.body;
  const articlesCollection = db.collection('articles');
  const newArticle = { nom, codeArticle, description, image, prix: parseFloat(prix), quantite: parseInt(quantite, 10) };

  articlesCollection.insertOne(newArticle, (err, result) => {
    if (err) {
      console.error('Erreur lors de l\'insertion de l\'article :', err);
      res.status(500).send('Erreur lors de la création de l\'article');
      return;
    }
    console.log('Article créé :', codeArticle);
    res.redirect('/articles'); // Rediriger vers la page des articles après création
  });
});

// Route pour récupérer les articles en JSON
app.get('/api/articles', (req, res) => {
  const articlesCollection = db.collection('articles');

  articlesCollection.find({}).toArray((err, articles) => {
    if (err) {
      console.error('Erreur lors de la récupération des articles :', err);
      res.status(500).send('Erreur lors de la récupération des articles');
      return;
    }
    res.json(articles);
  });
});

// Route pour récupérer un article spécifique en JSON
app.get('/api/article/:codeArticle', (req, res) => {
  const codeArticle = req.params.codeArticle;
  const articlesCollection = db.collection('articles');

  articlesCollection.findOne({ codeArticle }, (err, article) => {
    if (err) {
      console.error('Erreur lors de la récupération de l\'article :', err);
      res.status(500).send('Erreur lors de la récupération de l\'article');
      return;
    }

    if (article) {
      res.json(article);
    } else {
      res.status(404).send('Article non trouvé');
    }
  });
});


________________________________________________________________________________________________________________________________

//users.json

{
  "pierrre": {
    "email": "plepage7@gmail.com",
    "password": "monpassword"
  }
}